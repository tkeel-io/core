// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntityClient is the client API for Entity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntityClient interface {
	CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	PatchEntityZ(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error)
	GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityResponse, error)
	AppendMapper(ctx context.Context, in *AppendMapperRequest, opts ...grpc.CallOption) (*EntityResponse, error)
	SetEntityConfigs(ctx context.Context, in *SetEntityConfigRequest, opts ...grpc.CallOption) (*EntityResponse, error)
}

type entityClient struct {
	cc grpc.ClientConnInterface
}

func NewEntityClient(cc grpc.ClientConnInterface) EntityClient {
	return &entityClient{cc}
}

func (c *entityClient) CreateEntity(ctx context.Context, in *CreateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/CreateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) UpdateEntity(ctx context.Context, in *UpdateEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/UpdateEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntity(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) PatchEntityZ(ctx context.Context, in *PatchEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/PatchEntityZ", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) DeleteEntity(ctx context.Context, in *DeleteEntityRequest, opts ...grpc.CallOption) (*DeleteEntityResponse, error) {
	out := new(DeleteEntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/DeleteEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) GetEntity(ctx context.Context, in *GetEntityRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/GetEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) ListEntity(ctx context.Context, in *ListEntityRequest, opts ...grpc.CallOption) (*ListEntityResponse, error) {
	out := new(ListEntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/ListEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) AppendMapper(ctx context.Context, in *AppendMapperRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/AppendMapper", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entityClient) SetEntityConfigs(ctx context.Context, in *SetEntityConfigRequest, opts ...grpc.CallOption) (*EntityResponse, error) {
	out := new(EntityResponse)
	err := c.cc.Invoke(ctx, "/api.core.v1.Entity/SetEntityConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntityServer is the server API for Entity service.
// All implementations must embed UnimplementedEntityServer
// for forward compatibility
type EntityServer interface {
	CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error)
	UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error)
	PatchEntity(context.Context, *PatchEntityRequest) (*EntityResponse, error)
	PatchEntityZ(context.Context, *PatchEntityRequest) (*EntityResponse, error)
	DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error)
	GetEntity(context.Context, *GetEntityRequest) (*EntityResponse, error)
	ListEntity(context.Context, *ListEntityRequest) (*ListEntityResponse, error)
	AppendMapper(context.Context, *AppendMapperRequest) (*EntityResponse, error)
	SetEntityConfigs(context.Context, *SetEntityConfigRequest) (*EntityResponse, error)
	mustEmbedUnimplementedEntityServer()
}

// UnimplementedEntityServer must be embedded to have forward compatible implementations.
type UnimplementedEntityServer struct {
}

func (UnimplementedEntityServer) CreateEntity(context.Context, *CreateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEntity not implemented")
}
func (UnimplementedEntityServer) UpdateEntity(context.Context, *UpdateEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEntity not implemented")
}
func (UnimplementedEntityServer) PatchEntity(context.Context, *PatchEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntity not implemented")
}
func (UnimplementedEntityServer) PatchEntityZ(context.Context, *PatchEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchEntityZ not implemented")
}
func (UnimplementedEntityServer) DeleteEntity(context.Context, *DeleteEntityRequest) (*DeleteEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntity not implemented")
}
func (UnimplementedEntityServer) GetEntity(context.Context, *GetEntityRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntity not implemented")
}
func (UnimplementedEntityServer) ListEntity(context.Context, *ListEntityRequest) (*ListEntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEntity not implemented")
}
func (UnimplementedEntityServer) AppendMapper(context.Context, *AppendMapperRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendMapper not implemented")
}
func (UnimplementedEntityServer) SetEntityConfigs(context.Context, *SetEntityConfigRequest) (*EntityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntityConfigs not implemented")
}
func (UnimplementedEntityServer) mustEmbedUnimplementedEntityServer() {}

// UnsafeEntityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntityServer will
// result in compilation errors.
type UnsafeEntityServer interface {
	mustEmbedUnimplementedEntityServer()
}

func RegisterEntityServer(s grpc.ServiceRegistrar, srv EntityServer) {
	s.RegisterService(&Entity_ServiceDesc, srv)
}

func _Entity_CreateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).CreateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/CreateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).CreateEntity(ctx, req.(*CreateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_UpdateEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).UpdateEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/UpdateEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).UpdateEntity(ctx, req.(*UpdateEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntity(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_PatchEntityZ_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).PatchEntityZ(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/PatchEntityZ",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).PatchEntityZ(ctx, req.(*PatchEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_DeleteEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).DeleteEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/DeleteEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).DeleteEntity(ctx, req.(*DeleteEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_GetEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).GetEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/GetEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).GetEntity(ctx, req.(*GetEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_ListEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEntityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).ListEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/ListEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).ListEntity(ctx, req.(*ListEntityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_AppendMapper_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendMapperRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).AppendMapper(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/AppendMapper",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).AppendMapper(ctx, req.(*AppendMapperRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entity_SetEntityConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntityConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntityServer).SetEntityConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.core.v1.Entity/SetEntityConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntityServer).SetEntityConfigs(ctx, req.(*SetEntityConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entity_ServiceDesc is the grpc.ServiceDesc for Entity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.core.v1.Entity",
	HandlerType: (*EntityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntity",
			Handler:    _Entity_CreateEntity_Handler,
		},
		{
			MethodName: "UpdateEntity",
			Handler:    _Entity_UpdateEntity_Handler,
		},
		{
			MethodName: "PatchEntity",
			Handler:    _Entity_PatchEntity_Handler,
		},
		{
			MethodName: "PatchEntityZ",
			Handler:    _Entity_PatchEntityZ_Handler,
		},
		{
			MethodName: "DeleteEntity",
			Handler:    _Entity_DeleteEntity_Handler,
		},
		{
			MethodName: "GetEntity",
			Handler:    _Entity_GetEntity_Handler,
		},
		{
			MethodName: "ListEntity",
			Handler:    _Entity_ListEntity_Handler,
		},
		{
			MethodName: "AppendMapper",
			Handler:    _Entity_AppendMapper_Handler,
		},
		{
			MethodName: "SetEntityConfigs",
			Handler:    _Entity_SetEntityConfigs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/core/v1/entity.proto",
}

name: core
on:
  push:
    branches:
      - master
      - main
      - dev
    tags:
      - v*
  pull_request:
    branches:
      - master
      - main
jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.42
  test_ADM64:
    name: Test in ${{ matrix.target_os }}_${{ matrix.target_arch }} with Go_${{ matrix.go }}
    runs-on: ${{ matrix.os }}
    needs: [ lint ]
    env:
      GOVER: ${{ matrix.go }}
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        go: [ 1.17.2, 1.16 ]
        target_arch: [ amd64 ]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
      fail-fast: false
    steps:
      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v2.1.4
        with:
          go-version: ${{ matrix.go }}
      - name: Check out code
        uses: actions/checkout@v2
      - name: Run make go.mod check-diff
        if: matrix.target_os == 'linux'
        run: git diff --exit-code ./go.mod
      - name: run test in widnows
        if: matrix.target_os == 'windows'
        run: go test -v -cover -gcflags=all=-l .\...
      - name: run tests
        if: matrix.target_os != 'windows'
        run: go test -v -cover -gcflags=all=-l -coverprofile=coverage.out ./...
  build:
    name: Build ${{ matrix.target_os }}_${{ matrix.target_arch }} binaries
    runs-on: ${{ matrix.os }}
    needs: [ lint, test_ADM64 ]
    env:
      GOVER: 1.17.2
      GOOS: ${{ matrix.target_os }}
      GOARCH: ${{ matrix.target_arch }}
      GOPROXY: https://proxy.golang.org
      ARCHIVE_OUTDIR: dist/archives
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macOS-latest ]
        target_arch: [ arm, arm64, amd64 ]
        include:
          - os: ubuntu-latest
            target_os: linux
          - os: windows-latest
            target_os: windows
          - os: macOS-latest
            target_os: darwin
        exclude:
          - os: windows-latest
            target_arch: arm
          - os: windows-latest
            target_arch: arm64
          - os: macOS-latest
            target_arch: arm
          - os: macOS-latest
            target_arch: arm64
      fail-fast: false
    steps:
      - name: Set up Go ${{env.GOVER}}
        uses: actions/setup-go@v2.1.4
        with:
          go-version: ${{ env.GOVER }}
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Run make go.mod check-diff
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: git diff --exit-code ./go.mod
      - name: Codecov
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        uses: codecov/codecov-action@v1
      - name: Parse release version and set REL_VERSION
        run: python ./.github/scripts/get_release_version.py
      - name: Setup test output
        shell: bash
        run: |
          export TEST_OUTPUT_FILE=$GITHUB_WORKSPACE/test-unit.json
          echo "TEST_OUTPUT_FILE=$TEST_OUTPUT_FILE" >> $GITHUB_ENV
      - name: Run make release to build and archive binaries
        run: |
          mkdir -p ${{ env.ARCHIVE_OUTDIR }}
          make release GOOS=${{ matrix.target_os }} GOARCH=${{ matrix.target_arch }} ARCHIVE_OUT_DIR=${{ env.ARCHIVE_OUTDIR }}
      - name: Create release_version.txt
        if: matrix.target_arch == 'amd64' && matrix.target_os == 'linux'
        run: |
          [ ! -z "${{ env.REL_VERSION }}" ] && echo "${{ env.REL_VERSION }}" > "${{ env.ARCHIVE_OUTDIR }}/release_version.txt"
      - name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: Binary
          path: ${{ env.ARCHIVE_OUTDIR }}

  release:
    name: Create latest release
    needs:
      - build
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: Auto build from ${{ github.sha }} (master)
          draft: false
          prerelease: true

  upload:
    name: Upload release files
    needs:
      - release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        project:
          - tkeel_darwin_amd64.tar.gz
          - tkeel_linux_amd64.tar.gz
          - tkeel_linux_arm.tar.gz
          - tkeel_linux_arm64.tar.gz
          - tkeel_windows_amd64.zip
    steps:
      - name: Download Artifact
        id: download
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
          path: ${{ env.ARCHIVE_OUTDIR }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: ${{ steps.download.outputs.download-path }}/${{ matrix.project }}
          asset_name: ${{ matrix.project }}
          asset_content_type: application/octet-stream